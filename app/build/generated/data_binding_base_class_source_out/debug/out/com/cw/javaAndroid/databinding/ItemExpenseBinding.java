// Generated by view binder compiler. Do not edit!
package com.cw.javaAndroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cw.javaAndroid.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemExpenseBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView dateExpense;

  @NonNull
  public final TextView destinationExpense;

  @NonNull
  public final LinearLayout linearExpenses;

  @NonNull
  public final TextView nameTripExpense;

  @NonNull
  public final TextView stt;

  private ItemExpenseBinding(@NonNull LinearLayout rootView, @NonNull TextView dateExpense,
      @NonNull TextView destinationExpense, @NonNull LinearLayout linearExpenses,
      @NonNull TextView nameTripExpense, @NonNull TextView stt) {
    this.rootView = rootView;
    this.dateExpense = dateExpense;
    this.destinationExpense = destinationExpense;
    this.linearExpenses = linearExpenses;
    this.nameTripExpense = nameTripExpense;
    this.stt = stt;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemExpenseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemExpenseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_expense, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemExpenseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.date_expense;
      TextView dateExpense = ViewBindings.findChildViewById(rootView, id);
      if (dateExpense == null) {
        break missingId;
      }

      id = R.id.destination_expense;
      TextView destinationExpense = ViewBindings.findChildViewById(rootView, id);
      if (destinationExpense == null) {
        break missingId;
      }

      LinearLayout linearExpenses = (LinearLayout) rootView;

      id = R.id.name_trip_expense;
      TextView nameTripExpense = ViewBindings.findChildViewById(rootView, id);
      if (nameTripExpense == null) {
        break missingId;
      }

      id = R.id.stt;
      TextView stt = ViewBindings.findChildViewById(rootView, id);
      if (stt == null) {
        break missingId;
      }

      return new ItemExpenseBinding((LinearLayout) rootView, dateExpense, destinationExpense,
          linearExpenses, nameTripExpense, stt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
